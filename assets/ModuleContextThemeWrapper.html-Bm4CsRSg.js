import{_ as e,o,c as n,a as s}from"./app-Dh3YGII_.js";const a={},t=s(`<div class="custom-container warning"><p class="custom-container-title">Notice</p><p>Due to maintenance costs, the <code>YukiHookAPI</code> will no longer update this document from version <code>1.3.0</code> and switch to the API document automatically generated by the Dokka plugin in version <code>2.0.0</code>.</p></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>The English translation of this page has not been completed, you are welcome to contribute translations to us.</p><p>You can use the <strong>Chrome Translation Plugin</strong> to translate entire pages for reference.</p></div><h1 id="modulecontextthemewrapper-class" tabindex="-1"><a class="header-anchor" href="#modulecontextthemewrapper-class" aria-hidden="true">#</a> ModuleContextThemeWrapper <span class="symbol">- class</span></h1><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ModuleContextThemeWrapper</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">(baseContext: </span><span style="color:#F69D50;">Context</span><span style="color:#ADBAC7;">, theme: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">, configuration: </span><span style="color:#F69D50;">Configuration</span><span style="color:#ADBAC7;">?) : </span><span style="color:#F69D50;">ContextThemeWrapper</span></span>
<span class="line"></span></code></pre></div><p><strong>Change Records</strong></p><p><code>v1.1.0</code> <code>added</code></p><p><strong>Function Illustrate</strong></p><blockquote><p>代理 <code>ContextThemeWrapper</code>。</p></blockquote><p>通过包装，你可以轻松在 (Xposed) 宿主环境使用来自模块的主题资源。</p><h2 id="applyconfiguration-method" tabindex="-1"><a class="header-anchor" href="#applyconfiguration-method" aria-hidden="true">#</a> applyConfiguration <span class="symbol">- method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">applyConfiguration</span><span style="color:#ADBAC7;">(initiate: </span><span style="color:#F69D50;">Configuration</span><span style="color:#ADBAC7;">.() </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> Unit): </span><span style="color:#F69D50;">ModuleContextThemeWrapper</span></span>
<span class="line"></span></code></pre></div><p><strong>Change Records</strong></p><p><code>v1.1.0</code> <code>added</code></p><p><strong>Function Illustrate</strong></p><blockquote><p>设置当前 <code>ModuleContextThemeWrapper</code> 的 <code>Configuration</code>。</p></blockquote><p>设置后会自动调用 <code>Resources.updateConfiguration</code>。</p>`,16),p=[t];function c(l,r){return o(),n("div",null,p)}const d=e(a,[["render",c],["__file","ModuleContextThemeWrapper.html.vue"]]);export{d as default};
