import{_ as s,o as e,c as n,a as o}from"./app-Dh3YGII_.js";const a={},t=o(`<div class="custom-container warning"><p class="custom-container-title">Notice</p><p>Due to maintenance costs, the <code>YukiHookAPI</code> will no longer update this document from version <code>1.3.0</code> and switch to the API document automatically generated by the Dokka plugin in version <code>2.0.0</code>.</p></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>The English translation of this page has not been completed, you are welcome to contribute translations to us.</p><p>You can use the <strong>Chrome Translation Plugin</strong> to translate entire pages for reference.</p></div><h1 id="countrules-class" tabindex="-1"><a class="header-anchor" href="#countrules-class" aria-hidden="true">#</a> CountRules <span class="symbol">- class</span></h1><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">CountRules</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">constructor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre></div><p><strong>Change Records</strong></p><p><code>v1.1.0</code> <code>added</code></p><p><strong>Function Illustrate</strong></p><blockquote><p>这是一个模糊 <code>Class</code>、<code>Member</code> 数组 (下标) 个数条件实现类。</p></blockquote><p>可对 R8 混淆后的 <code>Class</code>、<code>Member</code> 进行更加详细的定位。</p><h2 id="int-iszero-i-ext-method" tabindex="-1"><a class="header-anchor" href="#int-iszero-i-ext-method" aria-hidden="true">#</a> Int.isZero <span class="symbol">- i-ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">isZero</span><span style="color:#ADBAC7;">(): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>Change Records</strong></p><p><code>v1.1.0</code> <code>added</code></p><p><strong>Function Illustrate</strong></p><blockquote><p>是否为 0。</p></blockquote><h2 id="int-morethan-i-ext-method" tabindex="-1"><a class="header-anchor" href="#int-morethan-i-ext-method" aria-hidden="true">#</a> Int.moreThan <span class="symbol">- i-ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">moreThan</span><span style="color:#ADBAC7;">(count: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>Change Records</strong></p><p><code>v1.1.0</code> <code>added</code></p><p><strong>Function Illustrate</strong></p><blockquote><p>大于 <code>count</code>。</p></blockquote><h2 id="int-lessthan-i-ext-method" tabindex="-1"><a class="header-anchor" href="#int-lessthan-i-ext-method" aria-hidden="true">#</a> Int.lessThan <span class="symbol">- i-ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">lessThan</span><span style="color:#ADBAC7;">(count: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>Change Records</strong></p><p><code>v1.1.0</code> <code>added</code></p><p><strong>Function Illustrate</strong></p><blockquote><p>小于 <code>count</code>。</p></blockquote><h2 id="int-ininterval-i-ext-method" tabindex="-1"><a class="header-anchor" href="#int-ininterval-i-ext-method" aria-hidden="true">#</a> Int.inInterval <span class="symbol">- i-ext-method</span></h2><div class="language-kotlin" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">inInterval</span><span style="color:#ADBAC7;">(countRange: </span><span style="color:#F69D50;">IntRange</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">Boolean</span></span>
<span class="line"></span></code></pre></div><p><strong>Change Records</strong></p><p><code>v1.1.0</code> <code>added</code></p><p><strong>Function Illustrate</strong></p><blockquote><p>在 <code>countRange</code> 区间 A ≤ this ≤ B。</p></blockquote>`,33),l=[t];function c(p,r){return e(),n("div",null,l)}const i=s(a,[["render",c],["__file","CountRules.html.vue"]]);export{i as default};
